% init the global and the local discrimiator
function net = glcic_disc_init(varargin)
    opts.cudnnWorkspaceLimit = 1024*1024*1024;
    opts = vl_argparse(opts, varargin) ;
    net = dagnn.DagNN() ;
    % ld_lastAdded : local discriminator lastAdded
    ld_lastAdded.var = 'local_disc_input' ;
    ld_lastAdded.depth = 3 ;
    % glcic_add_conv_block(net, opts, lastAdded, name, ksize, stride, dilate, depth, varargin)
    [net, ld_lastAdded] = glcic_add_conv_block(net, opts, ld_lastAdded, 'local_disc_layer_1', 5, 2, 1, 64);
    [net, ld_lastAdded] = glcic_add_conv_block(net, opts, ld_lastAdded, 'local_disc_layer_2', 5, 2, 1, 128);
    [net, ld_lastAdded] = glcic_add_conv_block(net, opts, ld_lastAdded, 'local_disc_layer_3', 5, 2, 1, 256);
    [net, ld_lastAdded] = glcic_add_conv_block(net, opts, ld_lastAdded, 'local_disc_layer_4', 5, 2, 1, 512);
    [net, ld_lastAdded] = glcic_add_conv_block(net, opts, ld_lastAdded, 'local_disc_layer_5', 5, 2, 1, 512);
    % local discriminator's input size is 64*64, after 5 conv layer, the output size
    % is 2*2, add a fully connected layer
    name = 'local_disc_layer_6';
    net.addLayer([name  '_conv'], ...
        dagnn.Conv('size', [2 2 ld_lastAdded.depth 1024], ...
        'stride', 1, ...
        'dilate', 1, ...
        'pad', 0, ...
        'hasBias', true, ...
        'opts', {'cudnnworkspacelimit', opts.cudnnWorkspaceLimit}), ...
        ld_lastAdded.var, ...
        [name '_conv'], ...
        {[name '_f'], [name '_b']}) ;
    ld_lastAdded.var = [name '_conv'];
    
    % gd_lastAdded : global discriminator lastAdded
    gd_lastAdded.var = 'global_disc_input';
    gd_lastAdded.depth = 3;
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_1', 5, 2, 1, 64);
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_2', 5, 2, 1, 128);
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_3', 5, 2, 1, 256);
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_4', 5, 2, 1, 512);
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_5', 5, 2, 1, 512);
    [net, gd_lastAdded] = glcic_add_conv_block(net, opts, gd_lastAdded, 'global_disc_layer_6', 5, 2, 1, 512);
    % global discriminator's input size is 128*128, after 6 conv layer, the output size
    % is 2*2, add a fully connected layer
    name = 'global_disc_layer_7';
    net.addLayer([name  '_conv'], ...
        dagnn.Conv('size', [2 2 gd_lastAdded.depth 1024], ...
        'stride', 1, ...
        'dilate', 1, ...
        'pad', 0, ...
        'hasBias', true, ...
        'opts', {'cudnnworkspacelimit', opts.cudnnWorkspaceLimit}), ...
        gd_lastAdded.var, ...
        [name '_conv'], ...
        {[name '_f'], [name '_b']}) ;
    gd_lastAdded.var = [name '_conv'];
    
    % concat layer
    name = 'combine_disc_layer_1';
    net.addLayer([name  '_concat'], ...
        dagnn.Concat('dim', 3), ...
        {ld_lastAdded.var, gd_lastAdded.var}, ...
        [name '_concat']) ;
    lastAdded.var = [name  '_concat'];
    
    % add a fully connected layer
    name = 'combine_disc_layer_2';
    net.addLayer([name  '_conv'], ...
        dagnn.Conv('size', [1 1 2048 1], ...
        'stride', 1, ...
        'dilate', 1, ...
        'pad', 0, ...
        'hasBias', true, ...
        'opts', {'cudnnworkspacelimit', opts.cudnnWorkspaceLimit}), ...
        lastAdded.var, ...
        'logits', ...
        {[name '_f'], [name '_b']}) ;

    net.vars(net.getVarIndex('logits')).precious = 1;
    
    % add a cross entropy loss layer
    net.addLayer('sigmoid_cross_entropy_loss', ...
    dagnn.SigmoidCrossEntropyLoss(),...
    {'logits', 'labels'},...
    'sigmoid_cross_entropy_loss');
    net.vars(net.getVarIndex('sigmoid_cross_entropy_loss')).precious = 1;
    
    % setting
    net.initParams() ;
    
end